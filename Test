local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Tha Xploit", "Sentinel")
local Combat = Window:NewTab("Combat")
local Player = Window:NewTab("Player")
local Utility = Window:NewTab("Utility")
local AutoFarm = Window:NewTab("AutoFarm")
local Exploit = Window:NewTab("Exploit")

local GunModSection = Combat:NewSection("Gun Mods")
local EnviromentSection = Combat:NewSection("Environment")
local PlayerSection = Player:NewSection("Character Modifications")
local UtilitySection = Utility:NewSection("Utility")
local PurchasingSection = AutoFarm:NewSection("Purchasing")
local MoneySection = AutoFarm:NewSection("Money")
local ExploitSection = Exploit:NewSection("Useful Exploits")

--TELEPORTING
-- Define teleport locations
local teleportLocations = {
	{name = "Guns Shop 1", position = Vector3.new(-1006.58356, 254.004608, -817.199097)},
	{name = "Guns Shop 2", position = Vector3.new(-129.877258, 282.965973, -796.901062)},
	{name = "Guns Shop 3 (Exotic Guns)", position = Vector3.new(60837.8633, 87609.1328, -352.99649, -0.00811773632, 4.7308145e-08, 0.999967039, -6.28109453e-10, 1, -4.73148027e-08, -0.999967039, -1.01217779e-09, -0.00811773632)},
	{name = "Hotel Hall", position = Vector3.new(-24.5520306, 416.43338, -454.355347)},
	{name = "Laundry", position = Vector3.new(-982.799316, 252.941132, -682.534668)},
	{name = "Rice Purchaser", position = Vector3.new(81065.0703, 133132.984, 167.565689)},
	{name = "Exotic Dealer", position = Vector3.new(-1521.92236, 273.35968, -988.202942)},
	{name = "Bank", position = Vector3.new(-130.178146, 283.632904, -1200.91504)},
	{name = "Weed Purchaser", position = Vector3.new(-630.154541, 252.798019, -730.857178)},
}

-- BUYING
local ricePurchaseCount = 0  -- Keeps track of rice purchases
local grapePurchaseCount = 0
local seedsPurchaseCount = 0
local riceBuyLocation = CFrame.new(51373.3594, 21680.2383, 5842.92969, 0.986435831, -1.52454032e-08, -0.164147288, 1.49616994e-08, 1, -2.96470071e-09, 0.164147288, 4.68564743e-10, 0.986435831)
local buyRicePrompt = workspace:WaitForChild("GUNS"):WaitForChild("RiceBag"):WaitForChild("Over"):WaitForChild("Sign"):WaitForChild("BuyPrompt")
local seedsBuyLocation = CFrame.new(-1539.0968, 282.439026, -991.320923, 0.0827591121, 3.31818448e-08, -0.996569574, 3.25935581e-08, 1, 3.60027634e-08, 0.996569574, -3.5461305e-08, 0.0827591121)
local buySeedsPrompt = workspace:WaitForChild("GUNS"):WaitForChild("Seeds"):WaitForChild("Bag"):WaitForChild("BuyPrompt")
local ricePrice = 3500
local grapePrice = 500
local seedsPrice = 1000
local minBuyValue = 1
local maxBuyValue = 50

local function createWarningGui(message)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") -- Add GUI to player's screen

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
	textLabel.Position = UDim2.new(0.35, 0, 0.9, 0)
	textLabel.BackgroundTransparency = 0.3
	textLabel.BackgroundColor3 = Color3.new(1, 0, 0) -- Red background for warning
	textLabel.Text = message
	textLabel.TextScaled = true
	textLabel.TextColor3 = Color3.new(255, 255, 255)
	textLabel.Parent = screenGui

	-- Remove the GUI after 1 second
	delay(2, function()
		screenGui:Destroy()
	end)
end

GunModSection:NewButton("Infinite Ammo", "Lets the player have unlimited ammo.", function()
	local function findModuleScriptInCharacter(character, moduleName)
		for _, descendant in ipairs(character:GetDescendants()) do
			if descendant:IsA("ModuleScript") and descendant.Name == moduleName then
				return descendant
			end
		end
		return nil  -- Return nil if not found
	end

	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")

	local localPlayer = Players.LocalPlayer  -- Get the local player
	if localPlayer then
		local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()  -- Wait if character not yet loaded
		local settingModule = findModuleScriptInCharacter(character, "Setting")
		local gun = settingModule  -- Assigning the found moduleScript to 'gun'

		if settingModule then
			local settings = require(gun)  -- Require the module script
			settings.LimitedAmmoEnabled = false
			settings.AmmoPerMag = 9000000000
			settings.Ammo = 9000000000
			settings.MaxAmmo = 9000000000
		else
			warn("'Setting' ModuleScript not found in the character.")
		end
	else
		warn("LocalPlayer not found.")
	end
end)

EnviromentSection:NewButton("FastFists", "No delay when using fists.", function()
	-- Script to find LocalPlayer's 'Setting' ModuleScript in Workspace

	-- Define a function to find a module script by name in a given model
	local function findModuleScriptInCharacter(character, moduleName)
		for _, descendant in ipairs(character:GetDescendants()) do
			if descendant:IsA("ModuleScript") and descendant.Name == moduleName then
				return descendant
			end
		end
		return nil  -- Return nil if not found
	end

	-- Main execution
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")

	local localPlayer = Players.LocalPlayer  -- Get the local player
	if localPlayer then
		local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()  -- Wait if character not yet loaded
		local settingModule = findModuleScriptInCharacter(character, "Melee_Settings")
		local punch = settingModule  -- Assigning the found moduleScript to 'gun'

		if settingModule then
			local punchSettings = require(punch)
			punchSettings.AttackCooldown = 1 / 100
		else
			warn("'Setting' ModuleScript not found in the character.")
		end
	else
		warn("LocalPlayer not found.")
	end
end)

GunModSection:NewButton("Rapid Fire", "Lets the player fire gun rapidly.", function()
	local function findModuleScriptInCharacter(character, moduleName)
		for _, descendant in ipairs(character:GetDescendants()) do
			if descendant:IsA("ModuleScript") and descendant.Name == moduleName then
				return descendant
			end
		end
		return nil  -- Return nil if not found
	end

	-- Main execution
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")

	local localPlayer = Players.LocalPlayer  -- Get the local player
	if localPlayer then
		local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()  -- Wait if character not yet loaded
		local settingModule = findModuleScriptInCharacter(character, "Setting")
		local gun = settingModule  -- Assigning the found moduleScript to 'gun'

		if settingModule then
			local settings = require(gun)  -- Require the module script
			settings.FireRate = 1 / 1000000
			settings.Auto = true
		else
			warn("'Setting' ModuleScript not found in the character.")
		end
	else
		warn("LocalPlayer not found.")
	end
end)

GunModSection:NewButton("No Recoil", "No recoil on the gun you are equipping.", function()
	local function findModuleScriptInCharacter(character, moduleName)
		for _, descendant in ipairs(character:GetDescendants()) do
			if descendant:IsA("ModuleScript") and descendant.Name == moduleName then
				return descendant
			end
		end
		return nil  -- Return nil if not found
	end

	-- Main execution
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")

	local localPlayer = Players.LocalPlayer  -- Get the local player
	if localPlayer then
		local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()  -- Wait if character not yet loaded
		local settingModule = findModuleScriptInCharacter(character, "Setting")
		local gun = settingModule  -- Assigning the found moduleScript to 'gun'

		if settingModule then
			local settings = require(gun)  -- Require the module script
			settings.Recoil = 0
		else
			warn("'Setting' ModuleScript not found in the character.")
		end
	else
		warn("LocalPlayer not found.")
	end
end)

GunModSection:NewButton("Infinite Damage", "Sets the damage of the gun infinite (May not work.)", function()
	local function findModuleScriptInCharacter(character, moduleName)
		for _, descendant in ipairs(character:GetDescendants()) do
			if descendant:IsA("ModuleScript") and descendant.Name == moduleName then
				return descendant
			end
		end
		return nil  -- Return nil if not found
	end

	-- Main execution
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")

	local localPlayer = Players.LocalPlayer  -- Get the local player
	if localPlayer then
		local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()  -- Wait if character not yet loaded
		local settingModule = findModuleScriptInCharacter(character, "Setting")
		local gun = settingModule  -- Assigning the found moduleScript to 'gun'

		if settingModule then
			local settings = require(gun)  -- Require the module script
			settings.BaseDamage = math.huge
		else
			warn("'Setting' ModuleScript not found in the character.")
		end
	else
		warn("LocalPlayer not found.")
	end
end)

PlayerSection:NewButton("Instant Interact", "No waiting when interacting with prompts.", function()
	for _, prompt in pairs(game:GetDescendants()) do
		if prompt:IsA("ProximityPrompt") then
			prompt.HoldDuration = 0
		end
	end


	game.DescendantAdded:Connect(function(descendant)
		if descendant:IsA("ProximityPrompt") then
			descendant.HoldDuration = 0
		end
	end)
end)


local flyEnabled = false
local cframeFlyEnabled = false
local flySpeed = 50

local function enableNormalFly()
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

	if not humanoidRootPart then
		warn("HumanoidRootPart not found!")
		return
	end

	local bodyVelocity = Instance.new("BodyVelocity", humanoidRootPart)
	bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
	bodyVelocity.Velocity = Vector3.zero

	local bodyGyro = Instance.new("BodyGyro", humanoidRootPart)
	bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)

	game:GetService("RunService").RenderStepped:Connect(function()
		if flyEnabled then
			local camera = workspace.CurrentCamera
			local moveDirection = Vector3.new(0, 0, 0)

			if game.UserInputService:IsKeyDown(Enum.KeyCode.W) then
				moveDirection += camera.CFrame.LookVector
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.S) then
				moveDirection -= camera.CFrame.LookVector
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.A) then
				moveDirection -= camera.CFrame.RightVector
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.D) then
				moveDirection += camera.CFrame.RightVector
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
				moveDirection += Vector3.new(0, 1, 0)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
				moveDirection -= Vector3.new(0, 1, 0)
			end

			bodyVelocity.Velocity = moveDirection.Unit * flySpeed
			bodyGyro.CFrame = camera.CFrame
		else
			bodyVelocity:Destroy()
			bodyGyro:Destroy()
		end
	end)
end

local function enableCFrameFly()
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

	if not humanoidRootPart then
		warn("HumanoidRootPart not found!")
		return
	end

	game:GetService("RunService").RenderStepped:Connect(function()
		if cframeFlyEnabled then
			local camera = workspace.CurrentCamera
			local newPosition = humanoidRootPart.CFrame

			if game.UserInputService:IsKeyDown(Enum.KeyCode.W) then
				newPosition = newPosition + camera.CFrame.LookVector * (flySpeed / 100)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.S) then
				newPosition = newPosition - camera.CFrame.LookVector * (flySpeed / 100)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.A) then
				newPosition = newPosition - camera.CFrame.RightVector * (flySpeed / 100)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.D) then
				newPosition = newPosition + camera.CFrame.RightVector * (flySpeed / 100)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
				newPosition = newPosition + Vector3.new(0, flySpeed / 100, 0)
			end
			if game.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
				newPosition = newPosition - Vector3.new(0, flySpeed / 100, 0)
			end

			humanoidRootPart.CFrame = newPosition
		end
	end)
end

PlayerSection:NewToggle("Normal Fly", "Toggle normal flying mode.", function(state)
	flyEnabled = state
	if flyEnabled then
		enableNormalFly()
	end
end)

PlayerSection:NewToggle("CFrame Fly", "Toggle CFrame flying mode.", function(state)
	cframeFlyEnabled = state
	if cframeFlyEnabled then
		enableCFrameFly()
	end
end)

PlayerSection:NewSlider("Fly Speed", "Adjust fly speed.", 150, 10, function(value)
	flySpeed = value
end)


PlayerSection:NewToggle("NoFallDamage", "Makes the player take no fall damage when falling.", function(state)
	if state then
		game:GetService("Players").LocalPlayer.Character.FallDamageRagdoll.Damage.Parent = game.ReplicatedStorage
	else
		game.ReplicatedStorage:WaitForChild("Damage").Parent = game:GetService("Players").LocalPlayer.Character.FallDamageRagdoll
	end
end)

PlayerSection:NewToggle("NoJumpCooldown", "Disables jump cooldown.", function(state)
	if state then
		game:GetService("Players").LocalPlayer.PlayerGui.JumpDebounce.LocalScript.Disabled = true
	else
		game:GetService("Players").LocalPlayer.PlayerGui.JumpDebounce.LocalScript.Disabled = false
	end
end)


PlayerSection:NewToggle("NoBob", "Disables camera bobbing.", function(state)
	if state then
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		
		character:WaitForChild("CameraBobbing").Disabled = true
	else
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()

		character:WaitForChild("CameraBobbing").Disabled = false
	end
end)

PurchasingSection:NewDropdown("Buy", "DropdownInf", {"GrapeDrank", "Rice", "Seeds"}, function(currentOption)
	local playerMoney = game:GetService("Players").LocalPlayer.stored.Money.Value -- Fetch the actual numeric value

	if (currentOption == "GrapeDrank") then
		if (playerMoney >= grapePrice) then
			for i = 1, grapePurchaseCount do
				local args = {
					[1] = "GrapeDrank"
				}

				game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer(unpack(args))
				wait(1)
			end
		else
			createWarningGui("Not enough money to buy grape drank!")
		end
	elseif (currentOption == "Rice") then
		if ricePurchaseCount <= 0 then
			warn("Set a value greater than 0 to buy rice.")
			return
		end

		local player = game.Players.LocalPlayer
		local character = player.Character
		if not character or not character:FindFirstChild("HumanoidRootPart") then
			warn("Character or HumanoidRootPart not found.")
			return
		end

		-- Only teleport if player has enough money
		if playerMoney >= ricePrice then
			local originalPosition = character.HumanoidRootPart.CFrame  -- Save the original position
			character.HumanoidRootPart.CFrame = riceBuyLocation -- Teleport to rice buy location
			
			wait(0.25)

			for i = 1, ricePurchaseCount do
				if buyRicePrompt and buyRicePrompt:IsA("ProximityPrompt") then
					local holdTime = buyRicePrompt.HoldDuration or 0
					buyRicePrompt:InputHoldBegin()
					if holdTime > 0 then
						wait(holdTime + 1)
					else
						wait(3)
					end
					buyRicePrompt:InputHoldEnd()
					wait(2)
				else
					warn("BuyPrompt not found or incorrect type.")
					break
				end
			end

			character.HumanoidRootPart.CFrame = originalPosition -- Return to original position
		else
			createWarningGui("Not enough money to buy rice!")
		end
	elseif (currentOption == "Seeds") then
		if seedsPurchaseCount <= 0 then
			warn("Set a value greater than 0 to buy seeds.")
			return
		end

		local player = game.Players.LocalPlayer
		local character = player.Character
		if not character or not character:FindFirstChild("HumanoidRootPart") then
			warn("Character or HumanoidRootPart not found.")
			return
		end

		-- Only teleport if player has enough money
		if playerMoney >= seedsPrice then
			local originalPosition = character.HumanoidRootPart.CFrame  -- Save the original position
			character.HumanoidRootPart.CFrame = seedsBuyLocation -- Teleport to seeds buy location
			
			wait(0.25)

			for i = 1, seedsPurchaseCount do
				if buySeedsPrompt and buySeedsPrompt:IsA("ProximityPrompt") then
					local holdTime = buySeedsPrompt.HoldDuration or 0
					buySeedsPrompt:InputHoldBegin()
					if holdTime > 0 then
						wait(holdTime + 1)
					else
						wait(3)
					end
					buySeedsPrompt:InputHoldEnd()
					wait(2)
				else
					warn("BuyPrompt not found or incorrect type.")
					break
				end
			end

			character.HumanoidRootPart.CFrame = originalPosition -- Return to original position
		else
			createWarningGui("Not enough money to buy seeds!")
		end
	end
end)

PurchasingSection:NewSlider("GrapeQuantity", "Select how many times to buy grape dranks", maxBuyValue, minBuyValue, function(sliderValue)
	grapePurchaseCount = sliderValue
end)

PurchasingSection:NewSlider("RiceQuantity", "Select how many times to buy rice", maxBuyValue, minBuyValue, function(sliderValue)
	ricePurchaseCount = sliderValue
end)

PurchasingSection:NewSlider("SeedsQuantity", "Select how many times to buy seeds", maxBuyValue, minBuyValue, function(sliderValue)
	seedsPurchaseCount = sliderValue
end)

UtilitySection:NewDropdown("Teleports", "Select a location to teleport", {
	"Guns Shop 1", "Guns Shop 2", "Guns Shop 3 (Exotic Guns)", "Hotel Hall", "Laundry", 
	"Rice Purchaser", "Exotic Dealer", "Bank", "Weed Purchaser"
}, function(selected)
	for _, location in ipairs(teleportLocations) do
		if location.name == selected then
			local player = game.Players.LocalPlayer
			if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
				player.Character.HumanoidRootPart.CFrame = CFrame.new(location.position)
			end
			break
		end
	end
end)

MoneySection:NewButton("Rob 'On The Radar' Studio", "Automatically robs 'On The Radar' studio.", function()
	local player = game:GetService("Players").LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()

	-- Store the player's original position before teleporting anywhere
	local originalPosition = character.HumanoidRootPart.CFrame

	-- Function to teleport the player to a random mesh inside the StudioPay model and trigger the prompt
	local function robStudioPay(modelName)
		local moneyFolder = workspace:WaitForChild("StudioPay"):WaitForChild("Money")
		local model = moneyFolder:WaitForChild(modelName)
		local meshes = model:GetChildren()
		local promptFound = false

		-- Loop through all meshes inside the model
		for _, mesh in ipairs(meshes) do
			if mesh:IsA("MeshPart") or mesh:IsA("Model") then
				local meshParts = mesh:GetChildren()

				-- Check for a ProximityPrompt inside the mesh
				for _, part in ipairs(meshParts) do
					if part:IsA("ProximityPrompt") then
						-- Check if the prompt is enabled before proceeding
						if part.Enabled then
							-- Set the duration to 0 to trigger it immediately
							part.HoldDuration = 0
							
							-- Ensure the player is close to the prompt
							local targetPosition = part.Parent.CFrame.Position
							character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

							wait(0.25) -- Give it a small delay to ensure the player has time to move to the prompt

							-- Trigger the ProximityPrompt
							local prompt = part.Parent:FindFirstChildOfClass("ProximityPrompt")
							if prompt then
								-- Simulate holding the prompt to trigger the action
								prompt:InputHoldBegin()
								wait(0.02) -- Hold for a brief moment before ending the action
								prompt:InputHoldEnd()
								wait(0.01)
								-- Simulate holding the prompt to trigger the action
								prompt:InputHoldBegin()
								wait(0.01) -- Hold for a brief moment before ending the action
								prompt:InputHoldEnd()
								wait(0.2)
								promptFound = true
							end
						else
							createWarningGui("This has already been stealed by you or someone else.")
						end

						break
					end
				end
			end
			if promptFound then break end
		end
	end

	-- Rob all three models
	robStudioPay("StudioPay1")
	robStudioPay("StudioPay2")
	robStudioPay("StudioPay3")

	-- After robbing all, teleport the player back to their original position
	wait(0.25)  -- Wait a little to ensure everything has completed
	character.HumanoidRootPart.CFrame = originalPosition
end)

ExploitSection:NewButton("Dupe Item", "Dupe Items", function()
	local player = game:GetService("Players").LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local tool = character:FindFirstChildOfClass("Tool")
	if not tool then
		createWarningGui("No tool is currently equipped.")
		return
	end

	-- Save the current position
	local originalPosition = character.PrimaryPart and character.PrimaryPart.CFrame or nil

	-- Get the safes
	local safesContainer = workspace:WaitForChild("1# Map"):WaitForChild("2 Crosswalks"):WaitForChild("Safes")
	local safes = safesContainer:GetChildren()

	-- Ensure there are safes available
	if #safes > 0 then
		-- Choose a random safe
		local randomSafe = safes[math.random(1, #safes)]

		player.Character.Humanoid:UnequipTools()
		-- Teleport the player to the random safe's position
		character:SetPrimaryPartCFrame(randomSafe.ChestClicker.CFrame)
		
		local args = {
			[1] = "Change",
			[2] = tool.Name,
			[3] = "Backpack",
			[4] = randomSafe
		}

		game:GetService("ReplicatedStorage"):WaitForChild("Inventory"):FireServer(unpack(args))
		
		wait(2)
		
	end
end)

ExploitSection:NewButton("NoMoneyLimit (BETA)", "No Description.", function()
	game.Players.LocalPlayer:SetAttribute("MaxMoney", math.huge)
end)

ExploitSection:NewToggle("SilentAcDisabler", "Disables the silent ac.", function(state)
	if state then
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		
		character:WaitForChild("abcde").Disabled = true
	else
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()

		character:WaitForChild("abcde").Disabled = false
	end
end)



