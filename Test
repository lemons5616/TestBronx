local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
	Title = "SentenceX",
	SubTitle = "by Xk3d",
	TabWidth = 160,
	Size = UDim2.fromOffset(580, 460),
	Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
	Theme = "Dark",
	MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local defaultFistCooldown = 0.53
local defaultFistMaxCombo = 2

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
	Main = Window:AddTab({ Title = "Main", Icon = "" }),
	Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
	Fluent:Notify({
		Title = "SentenceX",
		Content = "Loaded script succesfully!",
		SubContent = "Nothing else...", -- Optional
		Duration = 5 -- Set to nil to make the notification not disappear
	})

	local Toggle = Tabs.Main:AddToggle("Fast Fists", {Title = "Fast Fists", Default = false })

	Toggle:OnChanged(function()
		local isToggled = Options["Fast Fists"].Value
		
		if (isToggled) then
			local meleeConfig = game:GetService("ReplicatedStorage").MeleeConfigs
			local config = require(meleeConfig)
			
			if (config) then
				config.Fists.CoolDown = 0
				config.Fists.MaxCombo = 9999
			end
		else
			local meleeConfig = game:GetService("ReplicatedStorage").MeleeConfigs
			local config = require(meleeConfig)

			if (config) then
				config.Fists.CoolDown = defaultFistCooldown
				config.Fists.MaxCombo = defaultFistMaxCombo
			end
		end
	end)

	--Options.MyToggle:SetValue(false)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
	Title = "Fluent",
	Content = "The script has been loaded.",
	Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
