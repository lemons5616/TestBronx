local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
	Title = "Syntax",
	SubTitle = "by Xk3d",
	TabWidth = 140,
	Size = UDim2.fromOffset(580, 460),
	Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
	Theme = "Dark",
	MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
	Main = Window:AddTab({ Title = "Main", Icon = "" }),
	Player = Window:AddTab({ Title = "Player", Icon = "" }),
	Exploit = Window:AddTab({ Title = "Exploit", Icon = "" }),
	Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
	Game = Window:AddTab({ Title = "Game", Icon = "" }),
	Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options
local Lighting = game:GetService("Lighting")
local previousAmbient = Lighting.Ambient -- Store the original ambient value

do
	Fluent:Notify({
		Title = Window.Title,
		Content = "Loaded script succesfully!",
		SubContent = "Nothing else...", -- Optional
		Duration = 5 -- Set to nil to make the notification not disappear
	})
	
	-- Player Category
	
	-- Player Category
	local Player = game:GetService("Players").LocalPlayer
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local Humanoid = Character:WaitForChild("Humanoid")

	-- Jump Height Slider
	local JumpHeightSlider = Tabs.Player:AddSlider("JumpHeight", {
		Title = "Jump Height",
		Description = "Adjust the jump height of your character.",
		Default = Humanoid.JumpPower, -- Default to the player's current jump power
		Min = 10,
		Max = 200,
		Rounding = 0,
		Callback = function(Value)
			-- Update Jump Power when the slider is changed
			Humanoid.JumpPower = Value
		end
	})

	JumpHeightSlider:SetValue(Humanoid.JumpPower) -- Set initial value to current jump power

	-- Walk Speed Slider
	local WalkSpeedSlider = Tabs.Player:AddSlider("WalkSpeed", {
		Title = "Walk Speed",
		Description = "Adjust the walk speed of your character.",
		Default = Humanoid.WalkSpeed, -- Default to the player's current walk speed
		Min = 8, -- Default Roblox walk speed
		Max = 100,
		Rounding = 0,
		Callback = function(Value)
			-- Update Walk Speed when the slider is changed
			Humanoid.WalkSpeed = Value
		end
	})

	WalkSpeedSlider:SetValue(Humanoid.WalkSpeed) -- Set initial value to current walk speed
	
	-- Add Fly Modes Dropdown
	local FlyModesDropdown = Tabs.Main:AddDropdown("FlyModes", {
		Title = "Fly Modes",
		Values = {"Disabled", "Normal Fly", "CFrame Fly"},
		Multi = false,
		Default = "Disabled",
	})

	-- Variables to manage fly modes and speed
	local flyEnabled = false
	local cframeFlyEnabled = false
	local flySpeed = 50

	local function enableNormalFly()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

		if not humanoidRootPart then
			warn("HumanoidRootPart not found!")
			return
		end

		local bodyVelocity = Instance.new("BodyVelocity", humanoidRootPart)
		bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
		bodyVelocity.Velocity = Vector3.zero

		local bodyGyro = Instance.new("BodyGyro", humanoidRootPart)
		bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)

		game:GetService("RunService").RenderStepped:Connect(function()
			if flyEnabled then
				local camera = workspace.CurrentCamera
				local moveDirection = Vector3.new(0, 0, 0)

				if game.UserInputService:IsKeyDown(Enum.KeyCode.W) then
					moveDirection += camera.CFrame.LookVector
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.S) then
					moveDirection -= camera.CFrame.LookVector
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.A) then
					moveDirection -= camera.CFrame.RightVector
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.D) then
					moveDirection += camera.CFrame.RightVector
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
					moveDirection += Vector3.new(0, 1, 0)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
					moveDirection -= Vector3.new(0, 1, 0)
				end

				bodyVelocity.Velocity = moveDirection.Unit * flySpeed
				bodyGyro.CFrame = camera.CFrame
			else
				bodyVelocity:Destroy()
				bodyGyro:Destroy()
			end
		end)
	end

	local function enableCFrameFly()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

		if not humanoidRootPart then
			warn("HumanoidRootPart not found!")
			return
		end

		game:GetService("RunService").RenderStepped:Connect(function()
			if cframeFlyEnabled then
				local camera = workspace.CurrentCamera
				local newPosition = humanoidRootPart.CFrame

				if game.UserInputService:IsKeyDown(Enum.KeyCode.W) then
					newPosition = newPosition + camera.CFrame.LookVector * (flySpeed / 100)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.S) then
					newPosition = newPosition - camera.CFrame.LookVector * (flySpeed / 100)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.A) then
					newPosition = newPosition - camera.CFrame.RightVector * (flySpeed / 100)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.D) then
					newPosition = newPosition + camera.CFrame.RightVector * (flySpeed / 100)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
					newPosition = newPosition + Vector3.new(0, flySpeed / 100, 0)
				end
				if game.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
					newPosition = newPosition - Vector3.new(0, flySpeed / 100, 0)
				end

				humanoidRootPart.CFrame = newPosition
			end
		end)
	end

	FlyModesDropdown:OnChanged(function(value)
		if value == "Normal Fly" then
			flyEnabled = true
			cframeFlyEnabled = false
			enableNormalFly()
		elseif value == "CFrame Fly" then
			flyEnabled = false
			cframeFlyEnabled = true
			enableCFrameFly()
		else
			-- Disable all fly modes
			flyEnabled = false
			cframeFlyEnabled = false
		end
		print("Fly Mode changed to:", value)
	end)

	-- Add Fly Speed Slider
	local FlySpeedSlider = Tabs.Main:AddSlider("FlySpeed", {
		Title = "Fly Speed",
		Description = "Adjust fly speed.",
		Default = flySpeed,
		Min = 10,
		Max = 150,
		Rounding = 0,
		Callback = function(value)
			flySpeed = value
		end,
	})
	
	local NoJumpCoolDownToggle = Tabs.Player:AddToggle("NoJumpCoolDown", {Title = "NoJumpCoolDown", Default = false })

	NoJumpCoolDownToggle:OnChanged(function()
		local toggleValue = Options.NoJumpCoolDown.Value

		if (toggleValue) then
			game:GetService("Players").LocalPlayer.PlayerGui.JumpDebounce.LocalScript.Disabled = true
		else
			game:GetService("Players").LocalPlayer.PlayerGui.JumpDebounce.LocalScript.Disabled = false
		end
	end)
	
	-- Game Category
	
	local LightingTechnologyDropdown = Tabs.Game:AddDropdown("LightingTechnology", {
		Title = "Lighting Technology",
		Values = {"Voxel", "Compatibility", "ShadowMap", "Future"},
		Multi = false,
		Default = Lighting.Technology.Name, -- Default value based on the current Lighting technology
	})

	LightingTechnologyDropdown:SetValue(Lighting.Technology.Name) -- Set initial dropdown value

	LightingTechnologyDropdown:OnChanged(function(value)
		-- Map the selected string value to the corresponding Enum
		local newTechnology = Enum.Technology[value]
		if newTechnology then
			Lighting.Technology = newTechnology
			print("Lighting Technology changed to:", value)
		else
			print("Invalid Lighting Technology selected!")
		end
	end)

	local FullBrightToggle = Tabs.Game:AddToggle("FullBright", {Title = "FullBright", Default = false })

	FullBrightToggle:OnChanged(function()
		local toggleValue = Options.FullBright.Value
		
		if toggleValue then
			-- Store the current ambience if not already stored
			previousAmbient = Lighting.Ambient

			-- Set ambience to white
			Lighting.Ambient = Color3.new(1, 1, 1) -- White
			Lighting.OutdoorAmbient = Color3.new(1, 1, 1) -- Optional for outdoor effects
		else
			-- Revert to the previous ambience
			Lighting.Ambient = previousAmbient
			Lighting.OutdoorAmbient = previousAmbient -- If you want consistency with outdoor settings
		end
	end)
	
	local BrightnessSlider = Tabs.Game:AddSlider("Brightness", {
		Title = "Brightness",
		Description = "Sets the game lighting brightness to the set value.",
		Default = 2,
		Min = 0,
		Max = 10,
		Rounding = 2,
		Callback = function(Value)
			Lighting.Brightness = Value
		end
	})

	local TimeOfDaySlider = Tabs.Game:AddSlider("TimeOfDay", {
		Title = "TimeOfDay",
		Description = "Sets the game time of day to the set value.",
		Default = 2,
		Min = 0,
		Max = 10,
		Rounding = 0,
		Callback = function(Value)
			Lighting.TimeOfDay = string.format("%02d:00:00", math.floor(Value))
		end
	})
	
	local RemoveShadowsToggle = Tabs.Game:AddToggle("RemoveShadows", {Title = "RemoveShadows", Default = false })

	RemoveShadowsToggle:OnChanged(function()
		local toggleValue = Options.RemoveShadows.Value
		
		if (toggleValue) then
			game.Lighting.GlobalShadows = false
		else
			game.Lighting.GlobalShadows = true
		end
	end)
	
	local RemoveBlurToggle = Tabs.Game:AddToggle("RemoveBlur", {Title = "RemoveBlur", Default = false})

	RemoveBlurToggle:OnChanged(function()
		local toggleValue = Options.RemoveBlur.Value

		if toggleValue then
			-- Search and disable all BlurEffects in Lighting
			for _, instance in pairs(game:GetService("Lighting"):GetDescendants()) do
				if instance:IsA("BlurEffect") then
					instance.Enabled = false
				end
			end
		else
			-- Optionally re-enable blur effects if needed
			for _, instance in pairs(game:GetService("Lighting"):GetDescendants()) do
				if instance:IsA("BlurEffect") then
					instance.Enabled = true
				end
			end
		end
	end)
	
	-- Teleport Category

	-- Predefined Teleport Locations
	local teleportLocations = {
		-- Guns Shop 1
		{Name = "Guns Shop 1", Position = CFrame.new(92968.8047, 122097.961, 17023.4434)},

		-- Guns Shop 2
		{Name = "Guns Shop 2", Position = CFrame.new(66202, 123616, 5750)},
		
		-- Exotic Guns
		{Name = "Exotic Guns", Position = CFrame.new(60837, 87609, -350)}
	}

	-- Create a button for each teleport location
	for _, location in pairs(teleportLocations) do
		Tabs.Teleport:AddButton({
			Title = "Teleport to " .. location.Name,
			Description = "Click to teleport to " .. location.Name,
			Callback = function()
				-- Teleport the player to the selected location's Position
				local Character = game:GetService("Players").LocalPlayer.Character
				local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
				HumanoidRootPart.CFrame = location.Position
				print("Teleported to:", location.Name)
			end
		})
	end
	
	function dupeItem()
		local tool = Character:FindFirstChildOfClass("Tool")
		if not tool then
			Window:Dialog({
				Title = "Error",
				Content = "You have no item equipped, please equip one to duplicate it.",
				Buttons = {
					{
						Title = "Confirm",
						Callback = function()
						end
					}
				}
			})
			return
		end
		
		-- Check if the tool name is "Phone" or "Fist"
		if tool.Name == "Phone" or tool.Name == "Fist" then
			Window:Dialog({
				Title = "Tool Detected",
				Content = "You cannot clone this item: " .. tool.Name .. ". Choose another one.",
				Buttons = {
					{
						Title = "Confirm",
						Callback = function()
						end
					}
				}
			})
			return
		end
		
		-- Save the current position
		local originalPosition = Character.PrimaryPart and Character.PrimaryPart.CFrame or nil

		-- Get the safes
		local safesContainer = workspace:WaitForChild("1# Map"):WaitForChild("2 Crosswalks"):WaitForChild("Safes")
		local safes = safesContainer:GetChildren()

		-- Ensure there are safes available
		if #safes > 0 then
			-- Choose a random safe
			local randomSafe = safes[math.random(1, #safes)]

			Player.Character.Humanoid:UnequipTools()
			-- Teleport the player to the random safe's position
			Character:SetPrimaryPartCFrame(randomSafe.ChestClicker.CFrame)
			
			wait(0.25)

			-- Send the current item to the safe
			local argsTrue = {
				[1] = "Change",
				[2] = tool.Name,  -- Using the equipped tool's name
				[3] = "Backpack",
				[4] = randomSafe -- Send to the safe
			}
			game:GetService("ReplicatedStorage"):WaitForChild("Inventory"):FireServer(unpack(argsTrue))
			
			wait(0.01)
			
			local inv = game.Players.LocalPlayer.InvData
			for i = 1, 100 do
				local clone = Instance.new("IntValue")
				clone.Name = "FakeItem"
				clone.Parent = inv
				clone:Destroy()
			end
			
			--local invData = Instance.new(IntValue)
			
			wait(1)
			
			-- Send the current item to the safe
			local argsTrueX = {
				[1] = "Change",
				[2] = tool.Name,  -- Using the equipped tool's name
				[3] = "Inv",
				[4] = randomSafe -- Send to the safe
			}
			game:GetService("ReplicatedStorage"):WaitForChild("Inventory"):FireServer(unpack(argsTrueX))

			wait(1)
			
			Character:SetPrimaryPartCFrame(originalPosition)
		end
	end
	
	-- Exploit Category
	
	Tabs.Exploit:AddButton({
		Title = "DupeItem",
		Description = "Duplicates the current item you are holding.",
		Callback = function()
			Window:Dialog({
				Title = "Confirmation",
				Content = "Are you sure to duplicate this item?",
				Buttons = {
					{
						Title = "Confirm",
						Callback = function()
							dupeItem()
						end
					},
					{
						Title = "Cancel",
						Callback = function()
						end
					}
				}
			})
		end
	})

	Tabs.Exploit:AddButton({
		Title = "Alert Disabler",
		Description = "The game secretly sends alerts when you use known exploits, this disables them.",
		Callback = function()
			Window:Dialog({
				Title = "Confirmation",
				Content = "Are you sure to disable it?",
				Buttons = {
					{
						Title = "Confirm",
						Callback = function()
							Character:WaitForChild("abcde"):Destroy()
						end
					},
					{
						Title = "Cancel",
						Callback = function()
						end
					}
				}
			})
		end
	})

	--Options.MyToggle:SetValue(false)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
	Title = "Fluent",
	Content = "The script has been loaded.",
	Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
